require 'rails_helper'
require 'swagger_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/todos", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Todo. As you add validations to Todo, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TodosController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    let!(:todos) { create_list(:todo, 10) }

    path "/api/v1/todos" do
      get "List all todos" do
        tags "Todos"
        produces "application/json"
        response "200", "todos found" do
          schema type: :array,
            items: {
              id: { type: :integer },
              title: { type: :string },
              created_at: { type: :string },
              updated_at: { type: :string }
            },
            required: ["id", "title", "created_at", "updated_at"]

          run_test! do |response|
            data = JSON.parse(response.body)
            expect(data.size).to eq(Todo.count)
          end
        end
      end
    end
  end

  describe "GET /show" do
    path "/api/v1/todos/{id}" do
      get "Show todo" do
        tags "Todos"
        produces "application/json"
        parameter name: :id, in: :path, type: :integer, required: true

        response "200", "todo found" do
          schema type: :object,
            properties: {
              id: { type: :integer },
              title: { type: :string },
              created_at: { type: :string },
              updated_at: { type: :string }
            },
            required: ["id", "title", "created_at", "updated_at"]

          let(:id) { Todo.create(title: "Test").id }
          run_test!
        end

        response "404", "todo not found" do
          let(:id) { "invalid" }
          run_test!
        end
      end
    end
  end

  describe "POST /create" do
    path "/api/v1/todos" do
      post "Create todo" do
        tags "Todos"
        consumes "application/json"
        parameter name: :todo, in: :body, schema: {
          type: :object,
          properties: {
            title: { type: :string }
          },
          required: ["title"]
        }

        response "201", "todo created" do
          let(:todo) { { title: "Test" } }
          run_test!
        end

        response "422", "invalid request" do
          let(:todo) { { title: "" } }
          run_test!
        end
      end
    end
  end

  describe "PATCH /update" do
    path "/api/v1/todos/{id}" do
      patch "Update todo" do
        tags "Todos"
        consumes "application/json"
        parameter name: :id, in: :path, type: :integer, required: true
        parameter name: :todo, in: :body, schema: {
          type: :object,
          properties: {
            title: { type: :string }
          },
          required: ["title"]
        }

        response "200", "todo updated" do
          let(:id) { Todo.create(title: "Test").id }
          let(:todo) { { title: "Test" } }
          run_test!
        end

        response "422", "invalid request" do
          let(:id) { Todo.create(title: "Test").id }
          let(:todo) { { title: "" } }
          run_test!
        end
      end
    end
  end

  describe "DELETE /destroy" do
    path "/api/v1/todos/{id}" do
      delete "Delete todo" do
        tags "Todos"
        produces "application/json"
        parameter name: :id, in: :path, type: :integer, required: true

        response "204", "todo deleted" do
          let(:id) { Todo.create(title: "Test").id }
          run_test!
        end
      end
    end
  end
end
